CIwGxShaderTechnique
{
	name "postprocess"

	shader "vertex"
	{
		// These attributes will attach to the regular iwgx streams
		attribute highp vec4	inVert;	// Vertices	
		attribute mediump vec2	inUV0; // UV Stream 0
		
		// These uniforms will be filled by the standard iwgx fixed function pipeline
		uniform mediump mat4	inPMVMat; // transform from local coordinate space to window coordinates
		uniform mediump vec2	inUVScale; // scale to apply to UVs (gx uses uv scaling for various purposes)
		
		// Output of vertex shader
		varying mediump vec2	outUV0; // UV
		
		void main(void)
		{
			// Transform the vertex 
			gl_Position = inPMVMat * inVert;

			// applying the uv scale
			outUV0 = inUV0 * inUVScale;
		}
	}

	shader "fragment"
	{		
		// These uniforms will be filled by the standard iwgx fixed function pipeline
		uniform sampler2D		inSampler0; // texture stage 0
		uniform sampler2D		inSampler1; // texture stage 1

		// Output of vertex shader
		varying mediump vec2	outUV0;

		void main(void)
		{
			//Get diffuse texture colour
			lowp vec4 diffuseTex = texture2D( inSampler0, outUV0 );
			lowp vec4 bloomCol = texture2D( inSampler1, outUV0 );

			gl_FragColor = diffuseTex + bloomCol;
		}
	}
}
