CIwGxShaderTechnique
{
	name "normal_specular"
	
	shader "vertex"
	{
		// These attributes will attach to the regular iwgx streams
		attribute highp vec4	inVert;	// Vertices	
		attribute mediump vec4	inCol; // Colours
		attribute mediump vec3	inNorm; // Normals
		attribute mediump vec3	inTangent; // Tangents
		attribute mediump vec3	inBiTangent; // BiTangents
		attribute mediump vec2	inUV0; // UV Stream 0
		
		// These uniforms will be filled by the standard iwgx fixed function pipeline
		uniform mediump vec3	inEyePos; // Position of camera (in same space as verts)
		uniform mediump mat4	inPMVMat; // transform from local coordinate space to window coordinates
		uniform mediump mat3	inModelRotMat;
		uniform mediump vec2	inUVScale; // scale to apply to UVs (gx uses uv scaling for various purposes)
		uniform mediump vec3	inDiffuseDir; // direction of diffuse lighting
		
		// Output of vertex shader
		varying mediump vec3	outNorm; // Vertex normal
		varying mediump vec2	outUV0; // UV
		varying lowp vec3	outViewPos; // Direction of eyePos (in tangent space)
		varying lowp vec3	outLightDir; // Direction of diffuse light source (in tangent space)
		varying lowp float	outFogFactor;
		uniform mediump float inFogNear; // Fog near plane
		uniform mediump float inFogRange; // Fog depth
		
		// Pre-divide Z position for fog
		varying mediump float	outZPos;


		void main(void)
		{
			// transform the vertex 
			gl_Position = inPMVMat * inVert;

    		// calculate fog contribution 
			outFogFactor = clamp((gl_Position.z - inFogNear) / inFogRange, 0.0, 1.0);
		
			// generate tangent space transform
			mediump mat3 tangentMat = mat3(inTangent, inNorm, inBiTangent);
			
			// calculate direction to vertex (in tangent space)
			outViewPos = normalize(inVert.xyz - inEyePos * tangentMat);
		
			// applying the uv scale
			outUV0 = inUV0 * inUVScale;
			
			// calculate direction to diffuse light source (in tangent space)
			outLightDir = normalize(inDiffuseDir * tangentMat);
		}
	}

	shader "fragment"
	{		
		// These uniforms are filled by the params exposed above
		uniform mediump float	inTVScale; // Size of I3D Television

		// These uniforms will be filled by the standard iwgx fixed function pipeline
		uniform lowp vec4	inDiffuse; // diffuse material colour
		uniform lowp vec4	inAmbient; // ambient material colour
		uniform sampler2D		inSampler0; // texture stage 0
		uniform sampler2D		inSampler1; // texture stage 1
		uniform lowp vec4  inFogColour; // Fog colour


		// Output of vertex shader
		varying mediump vec2	outUV0;
		varying lowp vec3	outViewPos;
		varying lowp vec3	outLightDir;
		varying mediump vec3	outModelPos;
		varying lowp float	outFogFactor;



		void main(void)
		{
			//Get diffuse texture colour
			lowp vec4 diffuseTex = texture2D( inSampler0, outUV0 );

			//Get normal from normal map
			lowp vec3 modelNorm = texture2D(inSampler1, outUV0).xzy * 2.0 - vec3(1.0);
            
			//Get reflection of to-vertex direction
			lowp vec3 reflViewDir = reflect(outViewPos, modelNorm);
			
			//calculate specular lighting
			lowp vec3 spec = pow(clamp(dot(reflViewDir, outLightDir), 0.0, 1.0),10.0) * vec3(2.5);
			
			//calculate diffuse lighting
			lowp float diffuseLight = max(0.0, dot(outLightDir, modelNorm));
			lowp vec3 diffuse = inAmbient.xyz + inDiffuse.xyz * diffuseLight;

			lowp vec3 prefog = diffuseTex.xyz * diffuse + spec;

			gl_FragColor = vec4(mix(prefog, inFogColour.xyz, outFogFactor), 1.0);
 		}
	}
}
